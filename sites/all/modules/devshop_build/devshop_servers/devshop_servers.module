<?php
/**
 * @file
 * Code for the DevShop Servers feature.
 */

include_once 'devshop_servers.features.inc';

/**
 * Implements hook_menu();
 * @return mixed
 */
function devshop_servers_menu(){
  $items['keys/%'] = array(
    'page callback' => 'devshop_servers_user_keys',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  return $items;
}

function devshop_servers_user_keys($username) {
  $account = user_load_by_name($username);
  $keys = sshkey_load_all_by_entity('user', $account->uid);
    foreach ($keys as $key) {
      print $key->value . PHP_EOL;
    }
}

/**
 * Implements hook_ansible_inventory_alter().
 */
function devshop_servers_ansible_inventory_alter(&$inventory) {
  $inventory->ansible_apache->vars->aegir_user_name = 'devshop';
  $inventory->ansible_apache->vars->aegir_user_uid = 123456;
  $inventory->ansible_apache->vars->aegir_user_home = '/home/devshop';
}

/**
 * Implements hook_node_access_records_alter().
 *
 * Make OG access grants priority over hosting_server/hosting_client.
 */
function devshop_servers_node_access_records_alter(&$grants, $node) {
  // If node has a project and does not have another access realm... load the grants from the project.
  if (!empty($node->project) && $node->type != 'project') {
    $project_nid = is_numeric($node->project)? $node->project: $node->project->nid;
    $project_node = node_load($project_nid);
    $grants = module_invoke_all('node_access_records', $project_node);
  }

  // Give tasks on servers access
  if ($node->type == 'task') {
    $server_node = node_load($node->rid);
    if ($server_node->type == 'server' && isset($server_node->devshop_organization[LANGUAGE_NONE][0]['target_id'])) {
      $grants = module_invoke_all('node_access_records', $server_node);
    }
  }

  // If node is a server task, load grants from the devshop_organization node
//  dsm($node, 'ehko');
//  if ($node->type == 'task' && $node->ref->type == 'server' && isset($node->ref->devshop_organization[LANGUAGE_NONE][0]['target_id'])) {
//    $grants = module_invoke_all('node_access_records', $node->ref);
//  }


  // If node has OG Access, force it to be the only one.
  foreach ($grants as $i => &$grant) {
    if ($grant['realm'] == 'og_access:node') {
      $grant['priority'] = 2;
      $grants = array(
        $grant
      );
      break;
    }
  }

}


/**
 * Implements hook_form_alter().
 */
function devshop_servers_form_server_node_form_alter(&$form, &$form_state, $form_id) {
  $form['title']['#title'] = t('Name your Server');
  $form['title']['#attributes']['placeholder'] = t('servername');
  $form['title']['#attributes']['data-placement'] = 'top';

  $form['title']['#description'] = t('Enter the unique name you wish to give your server.');

  $form['title']['#field_prefix'] = "<div class='input-group'>";
  $form['title']['#field_suffix'] = "
        <div class=\"input-group-addon\">.devshop.systems</div>
        </div>
  ";

  $form['title']['#element_validate'][] = 'devshop_servers_title_element_validate';

  // Remove the domain from title.
  $form['title']['#default_value'] = strtr($form['title']['#default_value'], array(
    '.devshop.systems' => '',
  ));

  // Disable fields
  $form['human_name']['#access'] = FALSE;

  // Hide IP address and root user forms unless user selects private server.
  $private_server_states = array(
    'visible' => array(
      ':input[name="field_server_type[und]"]' => array('value' => 15346),
    ),
  );
  $form['field_url']['#access'] = FALSE;
  $form['field_root_server_user']['#states'] = $private_server_states;
  $form['field_root_server_user']['#weight'] = 100;
  $form['ips_wrapper']['#states'] = $private_server_states;
  $form['ips_wrapper']['#weight'] = 100;
  $form['ips_wrapper']['#type'] = 'container';

  $form['ips_wrapper']['new_ip_addresses'][0]['#title'] = t("Your server's public IP address.");
  $form['ips_wrapper']['new_ip_addresses'][0]['#description'] = t("Enter your server's public IP address. We will create the initial DNS records for you.");

  unset($form['ips_wrapper']['new_ip_addresses'][1]);
  unset($form['ips_wrapper']['new_ip_addresses'][2]);

  // @TODO: Test that content privacy is still saved.
  $form['group_content_access']['#access'] = FALSE;

  $form['services_tabs']['#weight'] = 10;

  $form['services']['#access'] = FALSE;

  if (empty($form['#node']->nid)) {

    foreach ($form['field_server_type']['und']['#options'] as $nid => &$label) {

      // Load the node and it's teaser for display.
      $node = node_load($nid);
      if (!empty($node)) {
        $view = node_view($node, 'full');
        $view['#theme'] = '';
        hide($view['links']);
        $label = '<h3>' . $node->title . '</h3>';
        $label .= render($view);
      }
    }

    // Hide "N/A" option for non-admins.
    if (!user_access('administer server')) {
      unset($form['field_server_type']['und']['#options']['_none']);
    }

    // Hide "amount" field.
    $form['field_monthly_cost']['#access'] = user_access('administer server');

    // Add our own validator
    array_unshift($form['#validate'], 'devshop_servers_server_node_form_validate');
  }
  else {
    // You can't change a server type once it's created.
    $form['field_server_type']['#access'] = FALSE;
  }
}

/**
 * Validate hook.
 *
 * @param $form_state
 * @param $form
 */
function devshop_servers_server_node_form_validate($form, &$form_state) {

  // Load the machine name for the chosen server type.
  $server_type_node = node_load($form_state['values']['field_server_type']['und'][0]['target_id']);
  $build_server_type = $server_type_node->field_server_type_code['und'][0]['machine'];

  switch ($build_server_type) {
    case 'mini':
    case 'mega':
      // Set provider type to packet.
      form_set_value($form['services']['provider']['type'], 'packet', $form_state);

      // Set plan based on server type.
      $plan = ($build_server_type == 'mini')? 'baremetal_0': 'baremetal_1';
      form_set_value($form['services']['provider']['packet']['provider_options']['plan'], $plan, $form_state);

      // Using key to get the only available option at the moment.
      $options = variable_get('aegir_cloud_packet_options', array());
      form_set_value($form['services']['provider']['packet']['provider_options']['project'], key($options['projects']), $form_state);
      form_set_value($form['services']['provider']['packet']['provider_options']['facility'], key($options['facilities']), $form_state);

      // Set OS to ubuntu trusty
      form_set_value($form['services']['provider']['packet']['provider_options']['os'], 'ubuntu_14_04', $form_state);
      break;
  }

  // Set to DevMaster (for now)
  form_set_value($form['services']['ansible_roles']['type'], 'devmaster', $form_state);

  // Set the default monthly price from the server type.->field_monthly_cost['und'][0]['value']
  $default_cost = $server_type_node->field_monthly_cost['und'][0]['value'];
  form_set_value($form['field_monthly_cost']['und'][0]['value'], $default_cost, $form_state);


}

/**
 * Validator for the server name field: Appends ".devshop.systems" to the title.
 * @param $element
 * @param $form_state
 * @param $form
 */
function devshop_servers_title_element_validate($element, &$form_state, $form) {
  if (!empty($element['#value'])) {
    $new_name = $element['#value'] . '.devshop.systems';
    form_set_value($element, $new_name, $form_state);
  }
}


/**
 * Implements hook_form_alter().
 */
function devshop_servers_form_devshop_project_create_step_git_alter(&$form, &$form_state, $form_id) {

  if (!empty(arg(3))) {
    // Create Project Wizard
    // Add info about connecting to Repo
    $form['connect'] = array(
      '#type' => 'fieldset',
      '#title' => t('Repository Access'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#description' => t('In order to launch copies of your website, devshop.build needs access to your source code.'),
    );
    $form['connect'] ['options'] = array(
      '#theme' => 'item_list',
      '#items' => array(
        t('If your project is on GitHub, add the user !link. If you grant administrator access to devshopbot, will be able to create webhooks for you.', array(
          '!link' => l( '<img src="https://avatars3.githubusercontent.com/u/11931385?v=3&s=16">' .
            t('devshopbot'), 'http://github.com/devshopbot',
            array(
              'html' => TRUE,
              'attributes' => array(
                'class' => 'label label-default',
              ),
            )
          ),
        )),
        t('If your project is on Acquia or Pantheon, add the user !link', array(
          '!link' => '<span class="label label-default"><img src="https://avatars3.githubusercontent.com/u/11931385?v=3&s=16">' . t('build@opendevshop.com') . '</span>'
        )),
        t('If your project is in a private git server, grant access to the devshop.build !modal', array(
          '!modal' => devshop_get_ssh_key_modal(),
        )),
      ),
    );
  }
}

function devshop_get_ssh_key_modal() {

  $ssh_key = variable_get('devshop_public_key', '');

  return <<<HTML
    <button type="button" class="btn label label-default" data-toggle="modal" data-target="#sshKeyModal">
        <i class="fa fa-key"></i>
        SSH Public Key
    </button>
  
    <!-- Modal -->
    <div class="modal fade" id="sshKeyModal" tabindex="-1" role="dialog" aria-labelledby="sshKeyModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="sshKeyModalLabel">
                        DevShop.Build SSH Public Key
                    </h4>
                </div>
                <div class="modal-body">
                    <textarea rows="13" cols="80" onclick="this.select()">$ssh_key</textarea>
                    <p>
                      This SSH public key is used to clone your code. Make sure you have added this key to your repository.
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
  

HTML;
}

/**
 * Implements hook_form_alter().
 */
function devshop_servers_form_devshop_remotes_alias_add_form_alter(&$form, &$form_state, $form_id) {

  $form['note']['#markup'] = t('To deploy data from a remote site, make sure you grant DevShop.Build access:');

  $form['options'] = array(
    '#weight' => -9,
    '#theme' => 'item_list',
    '#items' => array(
      t('If your project is on Acquia or Pantheon, add the user !link', array(
        '!link' => '<span class="label label-default"><img src="https://avatars3.githubusercontent.com/u/11931385?v=3&s=16">' . t('build@opendevshop.com') . '</span>'
      )),
      t("If your site is on a private server, you can grant access to devshop.build's SSH key:"),
    ),
  );
}

/**
 * Implements hook_node_presave().
 */
function devshop_servers_node_presave($node) {
  if ($node->type == 'server' && $node->services['ansible_roles']->type == 'devmaster') {
    $node->field_url['und'][0] = array(
      'url' => 'http://' . $node->title,
      'title' => t('Launch DevShop'),
    );
  }
}