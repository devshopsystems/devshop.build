<?php
/**
 * @file
 * Code for the DevShop Servers feature.
 */

include_once 'devshop_servers.features.inc';

/**
 * Implements hook_menu();
 * @return mixed
 */
function devshop_servers_menu(){
  $items['keys/%'] = array(
    'page callback' => 'devshop_servers_user_keys',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  return $items;
}

function devshop_servers_user_keys($username) {
  $account = user_load_by_name($username);
  $keys = sshkey_load_all_by_entity('user', $account->uid);
    foreach ($keys as $key) {
      print $key->value . PHP_EOL;
    }
}

/**
 * Implements hook_ansible_inventory_alter().
 */
function devshop_servers_ansible_inventory_alter(&$inventory) {
  $inventory->ansible_apache->vars->aegir_user_name = 'devshop';
  $inventory->ansible_apache->vars->aegir_user_uid = 123456;
  $inventory->ansible_apache->vars->aegir_user_home = '/home/devshop';
}

/**
 * Implements hook_node_access_records_alter().
 *
 * Make OG access grants priority over hosting_server/hosting_client.
 */
function devshop_servers_node_access_records_alter(&$grants, $node) {
  // If node has a project and does not have another access realm... load the grants from the project.
  if (!empty($node->project) && $node->type != 'project') {
    $project_nid = is_numeric($node->project)? $node->project: $node->project->nid;
    $project_node = node_load($project_nid);
    $grants = module_invoke_all('node_access_records', $project_node);
  }

  // Give tasks on servers access
  if ($node->type == 'task') {
    $server_node = node_load($node->rid);
    if ($server_node->type == 'server' && isset($server_node->devshop_organization[LANGUAGE_NONE][0]['target_id'])) {
      $grants = module_invoke_all('node_access_records', $server_node);
    }
  }

  // If node is a server task, load grants from the devshop_organization node
//  dsm($node, 'ehko');
//  if ($node->type == 'task' && $node->ref->type == 'server' && isset($node->ref->devshop_organization[LANGUAGE_NONE][0]['target_id'])) {
//    $grants = module_invoke_all('node_access_records', $node->ref);
//  }


  // If node has OG Access, force it to be the only one.
  foreach ($grants as $i => &$grant) {
    if ($grant['realm'] == 'og_access:node') {
      $grant['priority'] = 2;
      $grants = array(
        $grant
      );
      break;
    }
  }

}


/**
 * Implements hook_form_alter().
 */
function devshop_servers_form_server_node_form_alter(&$form, &$form_state, $form_id) {
  $form['title']['#title'] = t('Name your Server');
  $form['title']['#attributes']['placeholder'] = t('servername');
  $form['title']['#attributes']['data-placement'] = 'top';

  $form['title']['#description'] = t('Enter the unique name you wish to give your server.');

  $form['title']['#field_prefix'] = "<div class='input-group'>";
  $form['title']['#field_suffix'] = "
        <div class=\"input-group-addon\">.devshop.systems</div>
        </div>
  ";

  $form['title']['#element_validate'][] = 'devshop_servers_title_element_validate';

  // Disable fields
  $form['human_name']['#access'] = FALSE;
  $form['ips_wrapper']['#access'] = FALSE;
  $form['field_url']['#access'] = FALSE;
  $form['field_root_server_user']['#access'] = FALSE;

  // @TODO: Test that content privacy is still saved.
  $form['group_content_access']['#access'] = FALSE;

  $form['services_tabs']['#weight'] = 10;
  
    // If Issue doesn't get in, we can alter ourselves. https://www.drupal.org/node/2714539
//  // re-order some things
//  $form['services_tabs'] = array(
//    '#type' => 'vertical_tabs',
//  );
//
//  foreach (element_children($form['services']) as $i) {
//    $form['services'][$i]['#type'] = 'fieldset';
//    $form['services'][$i]['#group'] = 'services_tabs';
//    $form['services'][$i]['#collapsible'] = TRUE;
//    $form['services'][$i]['#collapsed'] = TRUE;
//    $form['services'][$i]['#prefix'] = '';
//    $form['services'][$i]['#suffix'] = '';
//  }
//  dsm($form);

//  $form['visibility'] = array(
//    '#type' => 'vertical_tabs',
//    '#attached' => array(
//      'js' => array(drupal_get_path('module', 'block') . '/block.js'),
//    ),
//  );
//
//  // Per-path visibility.
//  $form['visibility']['path'] = array(
//    '#type' => 'fieldset',
//    '#title' => t('Pages'),
//    '#collapsible' => TRUE,
//    '#collapsed' => TRUE,
//    '#group' => 'visibility',
//    '#weight' => 0,
//  );


}

/**
 * Validator for the server name field: Appends ".devshop.systems" to the title.
 * @param $element
 * @param $form_state
 * @param $form
 */
function devshop_servers_title_element_validate($element, &$form_state, $form) {
  if (!empty($element['#value'])) {
    $new_name = $element['#value'] . '.devshop.systems';
    form_set_value($element, $new_name, $form_state);
  }
}


/**
 * Implements hook_form_alter().
 */
function devshop_servers_form_devshop_project_create_step_git_alter(&$form, &$form_state, $form_id) {

  // Create Project Wizard
  // Add info about connecting to Repo
  $form['connect'] = array(
    '#type' => 'fieldset',
    '#title' => t('Repository Access'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['connect'] ['options'] = array(
    '#theme' => 'item_list',
    '#items' => array(
      t('If your project is on GitHub, add the user !link', array(
        '!link' => l( '<img src="https://avatars3.githubusercontent.com/u/11931385?v=3&s=16">' .
          t('devshopbot'), 'http://github.com/devshopbot',
          array(
            'html' => TRUE,
            'attributes' => array(
              'class' => 'label label-default',
            ),
          )
        ),
      )),
      t('If your project is on Acquia or Pantheon, add the user !link', array(
        '!link' => '<span class="label label-default"><img src="https://avatars3.githubusercontent.com/u/11931385?v=3&s=16">' . t('build@opendevshop.com') . '</span>'
      )),
    ),
  );
}