<?php
/**
 * @file
 * Code for the DevShop Servers feature.
 */

include_once 'devshop_servers.features.inc';

/**
 * Implements hook_menu();
 * @return mixed
 */
function devshop_servers_menu(){
  $items['inventory'] = array(
      'page callback' => 'devshop_servers_inventory',
      'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_presave()
 *
 * We resolve the server name to IP addresses if none has been given
 * by the operator. we also fire up the regular services hooks.
 */
function devshop_servers_node_presave($node) {

  if ($node->type == 'server' && empty($node->devshop_server_ip_addresses[LANGUAGE_NONE])) {
    // this returns an array or FALSE
    $ips = gethostbynamel($node->title);
    if ($ips) {
      drupal_set_message(t('Initialized the IP to %ip based on hostname %name. If an HTTP service is enabled, this will be used to create database grants so make sure it is the right address, as seen from the database server.', array('%ip' => join(',', $ips), '%name' => $node->title)), 'message');


      // @TODO: Figure out how to save text IPs to the format that field_ipaddress stores.
//      dsm($ips, 'IPs');
//      $node->new_ip_addresses = $ips;
    }
    else {
      drupal_set_message(t("Could not resolve IP address of server %name, not automatically setting IP address. DNS may fail.", array('%name' => $node->title)));
    }
  }
}

/**
 * Returns our server inventory.
 */
function devshop_servers_inventory() {
  // Build attributes object
  $inventory = new stdClass;
  $inventory->devmasters->hosts = array();
  $inventory->_meta->hostvars = new stdClass();

  // DevShop System Administrators.
  // Add any users with the role "system administrator"
  $sql = "SELECT u.uid FROM users u
      INNER JOIN users_roles ur ON u.uid = ur.uid
      INNER JOIN role r ON ur.rid = r.rid
      WHERE r.name = :role AND u.status = 1";
  $admin_uids = db_query($sql, array(':role' => 'system administrator'))->fetchCol();

  // Get all users and their keys.
  $sql = "SELECT u.uid FROM users u
      WHERE u.status = 1";
  $uids = db_query($sql)->fetchCol();
  $users = user_load_multiple($uids);

  // Lookup all users SSH Keys.
  foreach ($users as &$account) {
    $account_keys = array();
    $keys = sshkey_load_all_by_entity('user', $account->uid);
    foreach ($keys as $key) {
      $account->ssh_keys[] = $key->value;
    }
  }

  // Add system administrators
  foreach ($admin_uids as $uid) {
    $account = $users[$uid];

    $inventory->devmasters->vars->system_administrators[$account->name] =  array(
      'username' => $account->name,
      'ssh_keys' => $account->ssh_keys,
    );
  }

  // Get all server nodes.
  $sql = "SELECT nid FROM node
      WHERE type = 'server' AND status = 1";
  $server_nids = db_query($sql, array(':role' => 'system administrator'))->fetchCol();
  $server_nodes = node_load_multiple($server_nids);

  foreach ($server_nodes as $server_node) {
    // Add host to inventory.
    $inventory->devmasters->hosts[] = $server_node->title;

    // Add server users
    $server_users = field_get_items('node', $server_node, 'devshop_server_users');
    if (!empty($server_users)) {
      foreach ($server_users as $data) {
        $account = $users[$data['target_id']];
        $inventory->_meta->hostvars->{$server_node->title}->users[$account->name] = array(
          'name' => $account->name,
          'ssh_keys' => $account->ssh_keys,
        );
      }
    }
  }

  print json_encode($inventory);
  exit;
}
