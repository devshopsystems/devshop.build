<?php
/**
 * @file devshop_servers.install
 */

/**
 * Installs devshop_organizations()
 */
function devshop_servers_update_7000() {
  module_enable(array('devshop_organizations'));
}

/**
 * Installs devshop_support()
 */
function devshop_servers_update_7001() {
  module_enable(array('devshop_support'));
}

/**
 * Remove "ip address" and "server users" fields.
 */
function devshop_servers_update_7002() {
  field_delete_field('devshop_server_ip_address');
  field_delete_field('devshop_server_users');
  field_purge_batch(1);
}

/**
 * Installs aegir server modules
 */
function devshop_servers_update_7003() {
  module_enable(array(
    'hosting_platform',
    'hosting_site',
    'hosting_server',
    'hosting_web_server',
    'hosting_db_server',
    'hosting_task',
    'hosting_task_jenkins',
    'devshop_hosting',
    'devshop_projects',
    'devshop_dothooks',
    'devshop_pull',
    'devshop_github',
    'aegir_ssh',
  ));
}

/**
 * Create default client node.
 */
function devshop_servers_update_7004 () {
  variable_set('hosting_admin_client', 1);
  define('HOSTING_ADMIN_CLIENT', variable_get('hosting_admin_client', 1));

  $node = new stdClass();
  $node->uid = 1;
  $node->type = 'client';
  $node->title = 'admin';
  $node->status = 1;
  node_save($node);
  variable_set('hosting_default_client', $node->nid);
  variable_set('hosting_admin_client', $node->nid);
}

/**
 * Give server node type back to hosting_server.
 */
function devshop_servers_update_7005 () {
  db_update('node_type')
    ->fields(array(
      'module' => 'hosting_server',
      'base' => 'hosting_server'
    ))
    ->condition('type', 'server')
    ->execute()
  ;
}

/**
 * Create hosting_server records for all existing servers.
 */
function devshop_servers_update_7006() {
  $results = db_select('node', 'n')
    ->condition('type', 'server')
    ->fields('n', array('nid'))
    ->execute()
    ->fetchCol();

  $nodes = node_load_multiple($results);

  foreach ($nodes as $node) {
    if (empty($node->hosting_name)) {
      hosting_server_insert($node);
    }
  }
}

/**
 * Create server_master
 */
function devshop_servers_update_7007 (){

  $node = new stdClass();
  $node->uid = 1;
  $node->type = 'server';
  $node->title = 'hub.devshop.build';
  $node->status = 1;
  $node->hosting_name = 'server_master';
  $node->devshop_organization[LANGUAGE_NONE][0]['target_id'] = 18;
  $node->services = array();

  hosting_services_add($node, 'http', 'apache', array(
    'restart_cmd' => 'sudo /usr/sbin/apache2ctl graceful',
    'port' => 80,
    'available' => 1,
  ));
  hosting_services_add($node, 'db', 'mysql', array(
    'db_type' => 'mysql',
    'db_user' => 'root',
    'db_passwd' => '',
    'port' => 3306,
    'available' => 1,
  ));

  node_save($node);
  drupal_set_message(st('Creating server_master node. You must edit it and enter the valid mysql root password'));
}

/**
 * Rebuild node access.
 */
function devshop_servers_update_7008() {

  // Not sure why we need this, but access rebuild fails without it.
  define('HOSTING_ADMIN_CLIENT', variable_get('hosting_admin_client', 1));
  node_access_rebuild();
}

/**
 * Set jenkins URL.
 */
function devshop_servers_update_7009() {
  variable_set('hosting_task_jenkins_url', 'http://jenkins:NbgWHjMjNZOj@jenkins.devshop.build:8081/');
}


/**
 * Rebuild node access.
 */
function devshop_servers_update_7010() {
  define('HOSTING_ADMIN_CLIENT', variable_get('hosting_admin_client', 1));
  node_access_rebuild();
}

/**
 * Set module weight above devshop_github.
 */
function devshop_servers_update_7011() {
  db_query('UPDATE {system} SET weight = 2 WHERE name = :module', array(
    ':module' => 'devshop_servers'
  ));
}